AbacusFS
-----------

Contents:

1. Introduction
2. Architecture
3. Requirements
4. Installation
5. Usage

1. Introduction

AbacusFS is an integrated storage and computational platform which interacts with the file system and connects the calculations and the storage. Users and applications see it as a normal file system; however, the semantics are changed for files that are results of calculations done with the platform. When such a file is open for reading, AbacusFS first re-generates it if the input files used in the calculation have been modified. Alternatively, result files can be virtual, i.e. not stored anywhere but rather re-generated on every read access. The users of the platform will be able to deploy scientific calculations without worrying about re-calculation every time they make some changes in the calculation parameters or input files. They will also be able to see how each file was produced. 

Let us illustrate the usage of the platform with an use case. Whenever a user runs some calculation, the full command-line and other information is stored as metadata associated with the calculation's output file(s). Then, each time one of the output files is open for reading, it is first checked whether it is up-to-date, i.e. whether the input files have changed. If they have changed, the file is automatically re-generated by running the original command again and file access is allowed only after the re-calculation has finished. All existing command-line applications can be used without modifications, except for the applications that write to pre-existing files. The fact that input files can also be results of previous calculations does not pose any problem, so workflows are supported natively.

2. Architecture

Architecture consists of four main modules:
1) abacus file system implementation,
2) decision making module,
3) abacuscalc helper script for running the calculations,
4) database where extended metadata is stored.

Core module is the file system implementd in user space using FUSE written in Python using Python bindings for FUSE. On top of the main file system there is a small Linux /proc-like file system which offers a file-system API to access the database and keeps the in-memory files.

Decision making module is where the fuzzy logic algorithm is implemented.

Abacuscalc helper scripts is used whenever a user wants to run some calculation for the first time, which takes care of notifying the filesystem how the calculation is to be run, what input files it depends on, what output files it produces etc. More on usage of the script can be found in section 5. 

The extended metadata database is a Redis based database which is used to store extended metadata of the files and calculations. It is essentially a noSQL key-value store in which we store two important types of data:
- associations between each output file and the calculation that produced it,
- all the informations about each calculation that are required to re-run it plus some statistics used by the decision making module.


3. Requirements 

- fuse 2.8.6 and higher
http://fuse.sourceforge.net/

After installing fuse it is necessary to uncomment 'user_allow_other' in /etc/fuse.conf  
 
- fuse-python 0.2 
https://pypi.python.org/pypi/fuse-python
apt-get install python-pip
pip install fuse-python

- redis 2.6.12 and higher
$ wget http://download.redis.io/releases/redis-2.8.1.tar.gz
$ tar xzf redis-2.8.1.tar.gz
$ cd redis-2.8.1
$ make

- redis python client (redis-py) 
pip install redis


4. Installation

Just put all the files in AbacusFS folder located in /home/user directory.
Copy AbacusFS folder to /home/user.


5. Usage 

- run redis - cd to redis/src ./redis-server

- cd to /home/user/AbacusFS

- mount the abacus-fs file system: 
 ./abacus-fs.py -d -o direct_io -o allow_root -o root=test abacusfs

- mount abacusproc file system:
 ./abacusproc.py -d abacusfs/abacusproc

- running the calculation:
For a trivial example, let us suppose that the user wants to run:

		cat -n infile1 infile2 > outfile,

and he wishes the outfile to be managed by the file system as a calculation result. Outfile must, of course, be located on the abacus file system, while the input files can be anywhere. The user must run the abacuscalc script with the following modified command line:

	./abacuscalc.py cat -n -in infile1 -in infile2 -stdout outfile


Every input file must be preceded by -in, every output file by -out. Similarly, < is replaced with -stdin, > with -stdout and 2> with -stderr and | with -pipe. Everything else is considered as an option. If any of the mentioned keywords is an actual parameter to the calculation it must be preceded by -lit. The abacuscalc helper script then forwards the information about the calculation (command line, list of input files, list of output files) using the already mentioned abacusproc file system.

Important: input files must be given in absolute paths.

You can attach your own user value to the file when running the calculation. "1" is for the least valuable file and "10" for most valuable.

You can also check the metadata attached to the file busing "cat md_FILENAME".

When unmounting first unmount /abacusproc and then /abacusfs.




